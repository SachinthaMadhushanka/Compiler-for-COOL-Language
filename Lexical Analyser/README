README file for Programming Assignment 2 (C++ edition)
=====================================================

Your directory should contain the following files:

 Makefile
 README
 cool.flex
 test.cl
 lextest.cc      -> [cool root]/src/PA2/lextest.cc
 mycoolc         -> [cool root]/PA2/mycoolc
 stringtab.cc    -> [cool root]/PA2/stringtab.cc
 utilities.cc    -> [cool root]/PA2/utilities.cc
 handle_flags.cc -> [cool root]/PA2/handle_flags.cc
 *.d             dependency files
 *.*             other generated files

The include (.h) files for this assignment can be found in 
[cool root]/PA2

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code. Just edit this file.

	cool.flex is a skeleton file for the specification of the
	lexical analyzer. You should complete it with your regular
	expressions, patterns and actions. 

	test.cl is a COOL program that you can test the lexical
	analyzer on. It contains some errors, so it won't compile with
	coolc. However, test.cl does not exercise all lexical
	constructs of COOL and part of your assignment is to rewrite
	test.cl with a complete set of tests for your lexical analyzer.

	cool-parse.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

	stringtab.{cc|h} and stringtab_functions.h contains functions
        to manipulate the string tables.  DO NOT MODIFY.

	utilities.{cc|h} contains functions used by the main() part of
	the lextest program. You may want to use the strdup() function
	defined in here. Remember that you should not print anything
	from inside cool.flex! DO NOT MODIFY.

	lextest.cc contains the main function which will call your
	lexer and print out the tokens that it returns.  DO NOT MODIFY.

	mycoolc is a shell script that glues together the phases of the
	compiler using Unix pipes instead of statically linking code.  
	While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

        cool-lexer.cc is the scanner generated by flex from cool.flex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run flex.

 	The *.d files are automatically generated Makefiles that capture
 	dependencies between source and header files in this directory.
 	These files are updated automatically by Makefile; see the gmake
 	documentation for a detailed explanation.

Instructions
------------

	To compile your lextest program type:

	% make lexer

	Run your lexer by putting your test input in a file 'foo.cl' and
	run the lextest program:

	% ./lexer foo.cl

	To run your lexer on the file test.cl type:

	% make dotest

	If you think your lexical analyzer is correct and behaves like
	the one we wrote, you can actually try 'mycoolc' and see whether
	it runs and produces correct code for any examples.
	If your lexical analyzer behaves in an
	unexpected manner, you may get errors anywhere, i.e. during
	parsing, during semantic analysis, during code generation or
	only when you run the produced code on spim. So beware.

	If you change architectures you must issue

	% make clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA2
----------------

In the flex file you can find the int variables. They are,
	
	string_length 	 - Keep the current string length
	comment_depth 	 - Keep the track of the nested comments length [levels]
	is_broken_string - Flag to keep the validity of the string [Initially set to 0]

%x COMMENT and %x STRING rae the two define states. Same as <INITIAL>

Then the regular expressions are defined for each RegEx.

In the file you can find (?i:[a string]) pattern expressions. The i in here donted the case insensitive of the given string after ":" mark.
	_____________________________________________________
	| Expresiion |	Valid strings						|
	|___________________________________________________|
	| (?i:new)   | new , NEW , nEw, New, ...			|
	|____________|______________________________________|
	| t(?:rue)   | first character should lowercase t	|
	|____________|______________________________________|


Then rules are defined for the language

NEW.CLASS,ELSE,IF,FI,IN,INHERITS,LET,LOOP,POOL,THEN,WHILE,CASE,ESAC,OF,ISVOID, ASSIGN.NOT and DARROW primary Regex and return the same token as the action.

for exapmle:
	if the RegEx is (?i:new) he action is return NEW
	
	{(?i:new)}{
		retrun NEW;
	}

name of the TYPEID,OBJECTID and INT_CONST are recoreded and return relevant action.

For the boolean constant the value of its is recoreded.
_______________________________________________________________________________________________________________________________________________________________

COMMENTS
---------
When the comment state begin from the INITIAL state , then the commment_depth is set to 1 in the action.(It is denote the level of comment nested. Initally it is undefined.When the first comment state begin it set to 1)

When the comment state is begin from another comment state then the comment depth is increased by one.When thare is comment end is come then the comment depth is decreased by one. Likewise it is done to all comment end input.While this is happening in the action check whether comment depth is equal to 0. If it is zero then it is denoted comment if over and jump to INITIAL state.

In the comment state every input string is taken as valid (There is no action is done). If the new line character occured in the comment it is taken as new line and increase the curr_lineno by one.

If EOF is identified in the comment state that is taken as invalid.Then return an ERROR as the action.

If COMMENT_END regex is identified whenit is in the INITIAL state it will return an ERROR for unmatching *).

Inside the single line comment everything is ignored
_______________________________________________________________________________________________________________________________________________________________

STRINGS
-------

When the "\"" is identified (STRING_START) it is begin a new STRING state.With that it initialize is_broken_string flag and the string_length to 0. Also, in the action the memory begin with string_buf is filled with the null characters upto MAX_STR_CONST  times using memset function.

When a "\"" is identify in the STRING state then it is jump to INITIAL state from the STRING state.(Denote the end of the string).Also set the current character of the string_buf as '\0'. In here also check the length of the string is exceed the MX_STR_LENGTH. If it is exceed then return an ERROR for too long string.Otherwise check whether is_broken_string is low. If yes the save the string return the STR_CONST as the action.

\",\n,\t,\f,\b

If th above two characters appear in the STRING state these are taken as escape characters.(Consider as one character).

Multi-line string are alowed with \ at the end of each line.
	"This is \
	OK"
If these kind of scenario occured then the add new line escape character to the string and jump to next line.
	<STRING>"\\\n"		{ curr_lineno++; string_buf[string_length++] = '\n'; }

If the string have two backslashes next to each then only one baclslash is added to the string buffer. Also one backslash is ignore (No action performed for the one backslash)
	<STRING>"\\\\"		{ string_buf[string_length++] = '\\'; }
	<STRING>"\\"		{}

A string may not contain EOF. Also may not contain null character or escaped null character (0 and '\0').If these are appear in the STRING state this will set the is_broken_string to 1 and return the String contains escaped null character error or String contains null character error.

If the STRING contains the new line without \ curr_lineo is increased by one.(Purpose of this is to strat readin from the next line). Then the change the state to the INTIAL. Then check whther the string is broken. If not return an ERROR rto indicate Unterminated STRING constant.

Otherthan the above mentioned things all of other strings are taken in to the string buffer.

_______________________________________________________________________________________________________________________________________________________________

MULTIPLE CHARACTER OPERATORS
----------------------------

=>, <=, and <- are the multiple character operators. If these are occures reurn the relevant token as the action.

______________________________________________________________________________________________________________________________________________________________

".' , ";" , "," , ")" , "(" , "{" , "}" , "<" , ":" , "=" , "+" , "-" , "*" , "/" , "~" , "@"

For the all these character above is occured return the ASCII value of that character as the action.

Also all white spaces charcater are ingored. No action performed except the new line character.(\t, " ", \f, \v, \r)
If thee new line character occured curr_lino is increased by one as the action

Except every above mentioned thig this will return an ERROR.